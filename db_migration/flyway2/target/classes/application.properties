/**
 * Created by fish on 2021/3/15.
 */
spring.flyway.baseline-description = 我是基线描述

# 当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.
spring.flyway.baseline-on-migrate = true

# baseline的版本号，默认为1.0
spring.flyway.baseline-version = 0.9

# validation的原理是对比MetaData表与本地Migrations的checkNum值，如果值相同则验证通过，否则失败。
# 当发现校验错误时是否自动调用clean，默认false.
spring.flyway.clean-on-validation-error = false

# 是否开启flywary，默认true.
spring.flyway.enabled = true

# 设置迁移时的编码，默认UTF-8.
spring.flyway.encoding = UTF-8

# 当读取元数据表时是否忽略错误的迁移，默认false.
spring.flyway.ignore-failed-future-migration = false

# 当初始化好连接时要执行的SQL.
spring.flyway.init-sqls =

# 迁移脚本的位置，默认db/migration.
# 这个配合Profile，能给与不同的环境不同的测试数据
spring.flyway.locations =  classpath:/db/migration,classpath:/db/migration_development

# 是否允许无序的迁移，默认false.
spring.flyway.out-of-order = false

# 迁移时是否校验，默认为true
spring.flyway.validate-on-migrate = true

spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/Test?useUnicode=true&characterEncoding=utf-8&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
spring.datasource.username = root
spring.datasource.password = 1

logging.level.org.hibernate=INFO

#https://github.com/hibernate/hibernate-orm/blob/main/etc/hibernate.properties,hibernate属性表

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.jdbc.time_zone = Asia/Shanghai

#每个请求一条数据库连接，并不建议用，当遇到第三方外部请求时，会拖垮数据库连接资源
#spring.jpa.open-in-view=true

#开启在非事务位置，打开lazy_load，不建议用，会产生N+1问题
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

#https://prasanthmathialagan.wordpress.com/2017/04/20/beware-of-hibernate-batch-fetching,关键问题
#default_batch_fetch_size描述的是OneToMany,和ManyToMany的时候,单次批量拉取的数量,越大越好,但是会占用多一点内存,这是解决N+1问题的关键
#https://blog.csdn.net/weixin_30484739/article/details/94986283
#batch_fetch_style为LEGACY的时候,固定的SQL参数数量,总是为分裂为多条SQL执行,39条数据用14+14+10+1的方法拉取
#batch_fetch_style为PADDED的时候,会用固定填充的方法拉取,39条数据用14+14+14(填充3个)的方法拉取
#batch_fetch_style为DYNAMIC的时候,会用动态填充参数的方法拉取,39条数据用1次39条的方法拉取
spring.jpa.properties.hibernate.batch_fetch_style = DYNAMIC
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

#https://blog.csdn.net/seven_3306/article/details/9303879
#读取数据的时候,使用游标读取,每次fetch_size为50条数据.
#在mysql中,不设置fetch_size就会每次一次性拉数据,其实问题也不大.
#spring.jpa.properties.hibernate.jdbc.fetch_size = 50

#https://github.com/JavaWiz/sb-jpa-batch-insert
#写入数据的时候,可以将多条SQL语句合并一次性发送给服务器,这个参数就是batch_size,可以大幅提高写入效率,减少数据库与应用层的网络来回次数
spring.jpa.properties.hibernate.jdbc.batch_size = 30

#按照批量插入行的主键进行排序,这样插入数据库的速度会更快,因为数据库总能在尾部添加,意义不大
#spring.jpa.properties.hibernate.order_inserts=true

#按照批量更新行的主键进行排序,这样能有效避免高并发下的死锁,超高并发才有意义
#spring.jpa.properties.hibernate.order_updates=true

#启动服务器的时候,是否执行自动的DDL操作
#create-drop为总是重建数据库的schema和数据
#update为自动更新数据库缺失的schema
#validate为检查数据库schema
#spring.jpa.properties.hibernate.hbm2ddl.auto= create-drop

#https://stackoverflow.com/questions/59834461/multi-tenant-spring-jpa-dynamic-dialects-resolution-for-dynamic-datasources,多租户配置
